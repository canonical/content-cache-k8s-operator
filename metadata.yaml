# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

name: content-cache-k8s
display-name: Content-cache
description: |
  A [Juju](https://juju.is/) [charm](https://juju.is/docs/olm/charmed-operators) deploying and managing
  service for caching content, built on top of [Nginx](https://www.nginx.com/), configurable to cache
  any http or https web site and useful for building content delivery networks (CDN).

  This charm simplifies initial deployment and caching operations on Kubernetes,
  such as scaling the number of cache instances and cache configuration changes.
  It allows for deployment on many different Kubernetes platforms, from [MicroK8s](https://microk8s.io) to
  [Charmed Kubernetes](https://ubuntu.com/kubernetes) and public cloud Kubernetes
  offerings.

  This service was developed to provide front-end caching for web sites run by
  Canonical's IS team, and to reduce the need for third-party CDNs by providing
  high-bandwidth access to web sites via this caching front-end. 
  
  Currently used for a number of services including [the Snap Store](https://snapcraft.io/store),
  the majority of Canonical's web properties including [ubuntu.com](https://ubuntu.com) and
  [canonical.com](https://canonical.com), and [Ubuntu Extended Security Maintenance](https://ubuntu.com/security/esm).
  For DevOps or SRE teams this charm will make operating it simple and straightforward through Juju's clean interface.
summary: |
  HTTP cache service useful for building CDNs.
docs: https://discourse.charmhub.io/t/content-cache-documentation-overview/3992
maintainers:
  - https://launchpad.net/~content-cache-charmers
assumes:
  - k8s-api
issues: https://github.com/canonical/content-cache-k8s-operator/issues
source: https://github.com/canonical/content-cache-k8s-operator

containers:
  content-cache:
    resource: content-cache-image

resources:
  content-cache-image:
    type: oci-image
    description: Docker image for content-cache to run

provides:
  metrics-endpoint:
    interface: prometheus_scrape
  grafana-dashboard:
    interface: grafana_dashboard
  nginx-proxy:
    interface: nginx-route

requires:
  logging:
    interface: loki_push_api
    limit: 1
  nginx-route:
    interface: nginx-route
    limit: 1
